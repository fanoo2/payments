/* tslint:disable */
/* eslint-disable */
/**
 * Fanno Platform API
 * AI-driven platform automation API for agent orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@fanno.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Annotation result containing metadata and analysis
 * @export
 * @interface AnnotationResultJson
 */
export interface AnnotationResultJson {
    /**
     * Generated annotations
     * @type {Array<string>}
     * @memberof AnnotationResultJson
     */
    annotations?: Array<string>;
    /**
     * Method used for analysis
     * @type {string}
     * @memberof AnnotationResultJson
     */
    analysisMethod?: AnnotationResultJsonAnalysisMethodEnum;
    /**
     * When the analysis was performed
     * @type {Date}
     * @memberof AnnotationResultJson
     */
    timestamp?: Date;
    /**
     * Character count of input text
     * @type {number}
     * @memberof AnnotationResultJson
     */
    inputLength?: number;
    /**
     * Number of annotations generated
     * @type {number}
     * @memberof AnnotationResultJson
     */
    annotationCount?: number;
}


/**
 * @export
 */
export const AnnotationResultJsonAnalysisMethodEnum = {
    Openai: 'openai',
    Basic: 'basic'
} as const;
export type AnnotationResultJsonAnalysisMethodEnum = typeof AnnotationResultJsonAnalysisMethodEnum[keyof typeof AnnotationResultJsonAnalysisMethodEnum];


/**
 * Check if a given object implements the AnnotationResultJson interface.
 */
export function instanceOfAnnotationResultJson(value: object): value is AnnotationResultJson {
    return true;
}

export function AnnotationResultJsonFromJSON(json: any): AnnotationResultJson {
    return AnnotationResultJsonFromJSONTyped(json, false);
}

export function AnnotationResultJsonFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnnotationResultJson {
    if (json == null) {
        return json;
    }
    return {
        
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'analysisMethod': json['analysisMethod'] == null ? undefined : json['analysisMethod'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'inputLength': json['inputLength'] == null ? undefined : json['inputLength'],
        'annotationCount': json['annotationCount'] == null ? undefined : json['annotationCount'],
    };
}

export function AnnotationResultJsonToJSON(json: any): AnnotationResultJson {
    return AnnotationResultJsonToJSONTyped(json, false);
}

export function AnnotationResultJsonToJSONTyped(value?: AnnotationResultJson | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'annotations': value['annotations'],
        'analysisMethod': value['analysisMethod'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
        'inputLength': value['inputLength'],
        'annotationCount': value['annotationCount'],
    };
}

