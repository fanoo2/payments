/* tslint:disable */
/* eslint-disable */
/**
 * Fanno Platform API
 * AI-driven platform automation API for agent orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@fanno.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Agent
 */
export interface Agent {
    /**
     * 
     * @type {number}
     * @memberof Agent
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    type: AgentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    status: AgentStatusEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Agent
     */
    config: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    emoji: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    provider: string;
    /**
     * 
     * @type {Date}
     * @memberof Agent
     */
    lastUpdated: Date;
}


/**
 * @export
 */
export const AgentTypeEnum = {
    UiUx: 'ui-ux',
    Webrtc: 'webrtc',
    Backend: 'backend',
    Frontend: 'frontend',
    Payment: 'payment',
    Moderation: 'moderation',
    Devops: 'devops'
} as const;
export type AgentTypeEnum = typeof AgentTypeEnum[keyof typeof AgentTypeEnum];

/**
 * @export
 */
export const AgentStatusEnum = {
    Pending: 'pending',
    Configuring: 'configuring',
    Active: 'active',
    Error: 'error'
} as const;
export type AgentStatusEnum = typeof AgentStatusEnum[keyof typeof AgentStatusEnum];


/**
 * Check if a given object implements the Agent interface.
 */
export function instanceOfAgent(value: object): value is Agent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    if (!('emoji' in value) || value['emoji'] === undefined) return false;
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('lastUpdated' in value) || value['lastUpdated'] === undefined) return false;
    return true;
}

export function AgentFromJSON(json: any): Agent {
    return AgentFromJSONTyped(json, false);
}

export function AgentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Agent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'type': json['type'],
        'description': json['description'],
        'status': json['status'],
        'config': json['config'],
        'emoji': json['emoji'],
        'provider': json['provider'],
        'lastUpdated': (new Date(json['lastUpdated'])),
    };
}

export function AgentToJSON(json: any): Agent {
    return AgentToJSONTyped(json, false);
}

export function AgentToJSONTyped(value?: Agent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'type': value['type'],
        'description': value['description'],
        'status': value['status'],
        'config': value['config'],
        'emoji': value['emoji'],
        'provider': value['provider'],
        'lastUpdated': ((value['lastUpdated']).toISOString()),
    };
}

