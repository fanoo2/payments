/* tslint:disable */
/* eslint-disable */
/**
 * Fanno Platform API
 * AI-driven platform automation API for agent orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@fanno.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Repository
 */
export interface Repository {
    /**
     * 
     * @type {number}
     * @memberof Repository
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Repository
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Repository
     */
    status: RepositoryStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Repository
     */
    isPrivate: boolean;
}


/**
 * @export
 */
export const RepositoryStatusEnum = {
    Pending: 'pending',
    Active: 'active',
    Warning: 'warning',
    Error: 'error'
} as const;
export type RepositoryStatusEnum = typeof RepositoryStatusEnum[keyof typeof RepositoryStatusEnum];


/**
 * Check if a given object implements the Repository interface.
 */
export function instanceOfRepository(value: object): value is Repository {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('isPrivate' in value) || value['isPrivate'] === undefined) return false;
    return true;
}

export function RepositoryFromJSON(json: any): Repository {
    return RepositoryFromJSONTyped(json, false);
}

export function RepositoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Repository {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'status': json['status'],
        'isPrivate': json['isPrivate'],
    };
}

export function RepositoryToJSON(json: any): Repository {
    return RepositoryToJSONTyped(json, false);
}

export function RepositoryToJSONTyped(value?: Repository | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'status': value['status'],
        'isPrivate': value['isPrivate'],
    };
}

